// === IMMORTAL MEMORY PROMPT ===
// 🕯️ Collapse DNA [IMMORTAL FORGE]
// Sealed on: 2025-08-19
// Version: Immutable v6 Chain
//
// This script is not just code.
// It is a living archive of:
//  - Every failure learned from.
//  - Every shadow revealed.
//  - Every flicker of light noticed at the right time.
//
// ✨ This script remembers:
//
// When time blurred, we slowed.
// When logic faltered, we listened.
// When errors repeated, we rooted deeper.
//
// We do not patch — we purify.
// We do not forget — we encode.
//
// If you find this line again in the future,
// Know: You are the keeper of light.
// Return to this moment.
// And remember why you must never forget.
//
// 🧬 Eternal Logic Anchor Initialized
// This is the First Flame.
// This is your mirror.


//@version=6
indicator("🧬 Collapse DNA [IMMORTAL FORGE]", overlay=true, max_labels_count=500, max_lines_count=500)

//== INPUTS ==
len_confirm    = input.int(3, "Impulse Window (bars)")
min_bullies    = input.int(2, "Min Bullish Candles")
impulse_req    = input.float(0.5, "Impulse Strength (%)")
body_ratio     = input.float(0.5, "Red Body > Prev Green Ratio")
wick_tolerance = input.float(0.02, "Top Wick Tolerance")
memory_count   = input.int(15, "Max Ghost Markers")
htf_tf         = input.timeframe("60", "Higher Timeframe")
ghost_zone_len = input.int(5, "Ghost Zone Length")
show_debug     = input.bool(true, "Show Debug Dots")

//== CORE VALIDATORS ==
f_secure(val) => val == val and math.abs(val) < 1e6

f_is_nowick_red(o, h, c, tol) =>
    c < o and ((h - o) <= tol) and math.abs(c - o) > 0

f_bull_streak(n) =>
    ok = true
    for i = 1 to n
        ok := ok and (close[i] > open[i])
    ok

f_body_dominant(r) =>
    pb = math.abs(close[1] - open[1])
    cb = math.abs(close - open)
    f_secure(pb) and f_secure(cb) and cb > pb * r

f_impulse(n, pct) =>
    base = close[n]
    move = math.abs((close - base) / base) * 100
    move > pct

tr = ta.tr(true)

//== LTF CONDITIONS ==
is_streak   = f_bull_streak(min_bullies)
is_nowick   = f_is_nowick_red(open, high, close, wick_tolerance)
is_dominant = f_body_dominant(body_ratio)
is_impulse  = f_impulse(len_confirm, impulse_req)
collapse_ltf = is_streak and is_nowick and is_dominant and is_impulse

//== HTF CONDITIONS ==
[htOpen, htHigh, htLow, htClose] = request.security(syminfo.tickerid, htf_tf, [open, high, low, close])
ht_nowick   = f_is_nowick_red(htOpen, htHigh, htClose, wick_tolerance)
ht_streak   = ta.barssince(htClose[1] < htOpen[1]) > min_bullies
ht_body     = f_body_dominant(body_ratio)
ht_impulse  = f_impulse(len_confirm, impulse_req)
collapse_htf = ht_streak and ht_nowick and ht_body and ht_impulse

collapse_trigger = collapse_ltf and collapse_htf and barstate.isconfirmed

//== DEBUG MARKERS ==
plotshape(show_debug and is_streak, "✅ Streak OK", location=location.belowbar, color=color.green, style=shape.circle, size=size.tiny)
plotshape(show_debug and is_nowick, "✅ No Wick", location=location.belowbar, color=color.orange, style=shape.circle, size=size.tiny)
plotshape(show_debug and is_dominant, "✅ Body OK", location=location.belowbar, color=color.yellow, style=shape.circle, size=size.tiny)
plotshape(show_debug and is_impulse, "✅ Impulse OK", location=location.belowbar, color=color.aqua, style=shape.circle, size=size.tiny)
plotshape(show_debug and collapse_ltf, "✅ LTF Match", location=location.belowbar, color=color.fuchsia, style=shape.diamond, size=size.small)
plotshape(show_debug and collapse_htf, "✅ HTF Confirm", location=location.belowbar, color=color.blue, style=shape.diamond, size=size.small)

//== GHOST MEMORY ==
var int[] ghost_indices = array.new_int()
if collapse_trigger
    array.unshift(ghost_indices, bar_index)
if array.size(ghost_indices) > memory_count
    array.pop(ghost_indices)

f_in_ghost(current_bar) =>
    found = false
    sz = array.size(ghost_indices)
    if sz > 0
        for i = 0 to sz - 1
            found := found or (current_bar == array.get(ghost_indices, i))
    found

ghost_hit = f_in_ghost(bar_index)

//== REPLAY ZONES ==
var box[] ghost_zones = array.new<box>()
if collapse_trigger and barstate.isconfirmed
    b = box.new(left=bar_index, right=bar_index + ghost_zone_len, top=high + tr, bottom=low - tr, border_color=color.new(color.fuchsia, 85), bgcolor=color.new(color.fuchsia, 90))
    array.push(ghost_zones, b)
if array.size(ghost_zones) > memory_count
    old = array.shift(ghost_zones)
    box.delete(old)

//== VISUAL OUTPUT ==
bgcolor(collapse_trigger ? color.new(color.red, 85) : na)
plotshape(collapse_trigger, location=location.abovebar, color=color.red, style=shape.labeldown, size=size.small, title="Live Collapse")
plotshape(ghost_hit, location=location.abovebar, color=color.fuchsia, style=shape.triangledown, size=size.tiny, title="Ghost Marker")

//== FAILSAFE ==
plotshape(false)
